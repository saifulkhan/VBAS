package uk.ac.isc.seisdatainterface;

import java.util.TreeMap;
import uk.ac.isc.seisdata.AssessedCommand;
import uk.ac.isc.seisdata.AssessedCommandList;
import uk.ac.isc.seisdata.BlockTableModel;
import uk.ac.isc.seisdata.Command;
import uk.ac.isc.seisdata.CommandList;
import uk.ac.isc.seisdata.Hypocentre;
import uk.ac.isc.seisdata.HypocentresList;
import uk.ac.isc.seisdata.Phase;
import uk.ac.isc.seisdata.PhasesList;
import uk.ac.isc.seisdata.SeisEvent;
import uk.ac.isc.seisdata.SeisEventsList;
import uk.ac.isc.seisdata.VBASLogger;

/*
 * Used globally to register to change event and notify/fire changes.
 * Do not change the actual reference of these objects.
 */
public class Global {

    /*
     * 1. All SeisEvents are loaded first.
     * 2. Selected SeisEvent is the first one in the list/row.
     */
    private static final SeisEventsList seisEventsList = new SeisEventsList();
    private static final SeisEvent selectedSeisEvent = new SeisEvent();

    /*
     * 3. Store the Hypocentres, Phases, Commands, AssessedComamnds for the selected/first SeiesEvent.
     */
    private static final HypocentresList hypocentresList = new HypocentresList();
    private static final PhasesList phasesList = new PhasesList();
    private static final CommandList commandList = new CommandList();
    private static final AssessedCommandList assessedCommandList = new AssessedCommandList();

    /*
     * Events notiification related
     * Notify an event: a Hypocentre or a Phase is selected.
     */
    private static final Hypocentre selectedHypocentre = new Hypocentre();
    private static final PhasesList selectedPhaseList = new PhasesList();

    /*
     * Events notiification related
     * Notify an event:  a new Command is generated by the user.
     */
    private static final Command commandEvent = new Command();
    private static final AssessedCommand assessedComamndEvent = new AssessedCommand();

    
    public static void loadSeisEventsList() {
        VBASLogger.logDebug("Loading all SeisEvents.");
        BlockTableModel blockTableModel = new BlockTableModel();

        //load the block table from the database
        SeisDataDAO.loadBlocks(blockTableModel.getBlockSet());
        blockTableModel.initBlockArray();
        // fill in the events number
        SeisDataDAO.retrieveBlockEventNumber(blockTableModel.getTaskBlocks());
        SeisDataDAO.retrieveBlockReviewedEventNumber(blockTableModel.getTaskBlocks());
        // add data into evets list : retrieve the events from the database
        SeisDataDAO.retrieveAllEvents(seisEventsList.getEvents());
        SeisDataDAO.retrieveEventsMagnitude(seisEventsList.getEvents());
        SeisDataDAO.retrieveAllPhaseNumber(seisEventsList.getEvents());                         
        SeisDataDAO.retrieveAllRegionName(seisEventsList.getEvents());

        selectedSeisEvent.setValues(seisEventsList.getEvents().get(0));

        // also load the Hypocentres, Phases, Commands, AssessedComamnds for the selected/first SeiesEvent.
        loadSelectedSeisEventData();
    }

    public static void loadSelectedSeisEventData() {
        VBASLogger.logDebug("Load list of Hypocentre, Phase, Commmands, and AssessedCommands for SeisEvent: "
                + selectedSeisEvent.getEvid());

        /*
         * Hypocentre
         */
        SeisDataDAO.retrieveHypos(selectedSeisEvent.getEvid(),
                hypocentresList.getHypocentres());
        SeisDataDAO.retrieveHyposMagnitude(hypocentresList.getHypocentres());
        // as I remove all the hypos when clicking an event to retrieve the hypos, 
        // so need reset prime hypo every time
        // TODO: Saiful, What is this?
        for (Hypocentre hypo : hypocentresList.getHypocentres()) {
            if (hypo.getIsPrime() == true) {
                selectedSeisEvent.setPrimeHypo(hypo);
            }
        }

        /*
         * Phase
         */
        TreeMap<String, String> stations = new TreeMap<String, String>();
        SeisDataDAO.retrieveAllPhases(selectedSeisEvent.getEvid(), phasesList.getPhases());
        SeisDataDAO.retrieveAllPhasesAmpMag(selectedSeisEvent.getEvid(),
                phasesList.getPhases());
        SeisDataDAO.retrieveAllStationsWithRegions(stations);
        // load the correspondent map into the stataions
        // put the region name into the pahseList
        for (int i = 0; i < phasesList.getPhases().size(); i++) {
            phasesList.getPhases()
                    .get(i)
                    .setRegionName(stations
                            .get(phasesList
                                    .getPhases()
                                    .get(i)
                                    .getReportStation()));
        }

        /*
         * Commands
         */
        SeisDataDAO.readCommandTable(selectedSeisEvent.getEvid(), commandList.getCommandList());

        /*
         * AssessedCommand 
         */
        SeisDataDAO.readAssessedCommandTable(selectedSeisEvent.getEvid(), assessedCommandList.getAssessedCommandList());

        VBASLogger.logDebug("Selected SeisEvent=" + selectedSeisEvent.getEvid()
                + ", #Hypocentres:" + hypocentresList.getHypocentres().size()
                + ", #Phases:" + phasesList.getPhases().size()
                + ", #Commands:" + commandList.getCommandList().size()
                + ", #AssessedCommands:" + assessedCommandList.getAssessedCommandList().size());

    }

    public static SeisEvent getSelectedSeisEvent() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return selectedSeisEvent;
    }

    public static SeisEventsList getSeisEventsList() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return seisEventsList;
    }

    public static PhasesList getPhasesList() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return phasesList;
    }

    public static HypocentresList getHypocentresList() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return hypocentresList;
    }

    public static AssessedCommandList getAssessedCommandList() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return assessedCommandList;
    }

    public static CommandList getCommandList() {
        // if the SeisEvents are not loaded yet.
        if (selectedSeisEvent.getEvid() == 0) {
            loadSeisEventsList();
        }
        return commandList;
    }

    /*
     * Events related
     */
    public static Command getCommandEvent() {
        return commandEvent;
    }

    public static AssessedCommand getAssessedComamndEvent() {
        return assessedComamndEvent;
    }

    public static Hypocentre getSelectedHypocentre() {
        return selectedHypocentre;
    }

    public static PhasesList getSelectedPhaseList() {
        return selectedPhaseList;
    }
}
