
package uk.ac.isc.taskblockview;

import java.awt.BorderLayout;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import uk.ac.isc.eventscontrolview.EventsControlViewTopComponent;
import uk.ac.isc.seisdata.BlockTableModel;

/**
 * Top component which displays the table of assigned blocks.
 */
@ConvertAsProperties(
        dtd = "-//uk.ac.isc.taskblockview//TaskBlockView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TaskBlockViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "uk.ac.isc.taskblockview.TaskBlockViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TaskBlockViewAction",
        preferredID = "TaskBlockViewTopComponent"
)
@Messages({
    "CTL_TaskBlockViewAction=TaskBlockView",
    "CTL_TaskBlockViewTopComponent=TaskBlockView Window",
    "HINT_TaskBlockViewTopComponent=This is a TaskBlockView window"
})
public final class TaskBlockViewTopComponent extends TopComponent {

    private JScrollPane scrollPane;
    
    //model reference
    private BlockTableModel btm;
    
    //the table to show the blocks
    private JTable blockTable;
    
    private final TopComponent tc = WindowManager.getDefault().findTopComponent("EventsControlViewTopComponent");
    
    public TaskBlockViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_TaskBlockViewTopComponent());
        setToolTipText(Bundle.HINT_TaskBlockViewTopComponent());

        btm = ((EventsControlViewTopComponent) tc).getControlPanel().getBlockTableModel();
        
        blockTable = new JTable(btm);
        
        scrollPane = new JScrollPane(blockTable);
        
        this.setLayout(new BorderLayout());
        this.add(scrollPane, BorderLayout.CENTER);
        
    }
    /*EventsControlViewTopComponent*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
