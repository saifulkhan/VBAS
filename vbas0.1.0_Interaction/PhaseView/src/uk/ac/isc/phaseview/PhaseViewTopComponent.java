
package uk.ac.isc.phaseview;

import java.awt.BorderLayout;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import org.jfree.data.time.Second;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import uk.ac.isc.eventscontrolview.EventsControlViewTopComponent;
import uk.ac.isc.seisdata.Hypocentre;
import uk.ac.isc.seisdata.HypocentresList;
import uk.ac.isc.seisdata.PhasesList;
import uk.ac.isc.seisdata.SeisDataChangeEvent;
import uk.ac.isc.seisdata.SeisDataChangeListener;

/**
 * Top component which displays the phase view.
 */
@ConvertAsProperties(
        dtd = "-//uk.ac.isc.phaseview//PhaseView//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PhaseViewTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "phasearrivalview", openAtStartup = true)
@ActionID(category = "Window", id = "uk.ac.isc.phaseview.PhaseViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PhaseViewAction",
        preferredID = "PhaseViewTopComponent"
)
@Messages({
    "CTL_PhaseViewAction=PhaseView",
    "CTL_PhaseViewTopComponent=PhaseView Window",
    "HINT_PhaseViewTopComponent=This is a PhaseView window"
})
public final class PhaseViewTopComponent extends TopComponent implements SeisDataChangeListener {

    //references to access to the data model
    private final HypocentresList hyposList;
    
    private Hypocentre ph;
    
    private final PhasesList phasesList;
    
    //pane and panels for views
    private JSplitPane pairViewsPane = null;
    
    private PhaseViewControlPanel pvcp = null;
    
    private JScrollPane leftPane = null;
    
    private JScrollPane rightPane = null;
    
    private PhaseTravelViewPanel pgvp = null;
    
    private PhaseDetailViewPanel pdvp = null;
    
    //get control window to retrieve data
    private final TopComponent tc = WindowManager.getDefault().findTopComponent("EventsControlViewTopComponent");
    
    /**this is for saving the theoretical travel time points */
    private final DuplicateUnorderTimeSeriesCollection ttdData = new DuplicateUnorderTimeSeriesCollection();
    
    private boolean showTTDFlag = true;
    
    public PhaseViewTopComponent() {
        initComponents();
        setName(Bundle.CTL_PhaseViewTopComponent());
        setToolTipText(Bundle.HINT_PhaseViewTopComponent());

        phasesList = ((EventsControlViewTopComponent) tc).getControlPanel().getPhasesList();
        
        hyposList = ((EventsControlViewTopComponent) tc).getControlPanel().getHyposList();
        loadTTDData(hyposList.getHypocentres().get(0).getEvid());
        
        for(int i = 0; i<hyposList.getHypocentres().size();i++)
        {
            if(hyposList.getHypocentres().get(i).getIsPrime())
            {
                ph = hyposList.getHypocentres().get(i);
            }
        }
        
        pgvp = new PhaseTravelViewPanel(phasesList,ph,ttdData);
        
        pdvp = new PhaseDetailViewPanel(pgvp, ttdData);
        
        //handle general view first
        pgvp.setPrime(ph);
        //pgvp.setTTDData(ttdData);
        
        pvcp = new PhaseViewControlPanel(pgvp, pdvp);
        
        leftPane = new JScrollPane(pgvp);
        rightPane = new JScrollPane(pdvp);
         
        pairViewsPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,leftPane,rightPane);
        pairViewsPane.setResizeWeight(0.5d);
                
        this.setLayout(new BorderLayout());
        this.add(pvcp,BorderLayout.NORTH);
        this.add(pairViewsPane, BorderLayout.CENTER);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
        phasesList.addChangeListener(this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
        phasesList.removeChangeListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void SeisDataChanged(SeisDataChangeEvent event) {
        
        if(showTTDFlag == true)
        {
            loadTTDData(hyposList.getHypocentres().get(0).getEvid());
        }
           
        for(int i = 0; i<hyposList.getHypocentres().size();i++)
        {
            if(hyposList.getHypocentres().get(i).getIsPrime())
            {
                ph = hyposList.getHypocentres().get(i);
            }
        } 
        pgvp.setPrime(ph);
        pgvp.setTTDData(ttdData);
        
        pvcp.reset();
        pgvp.UpdateData();
        
        pdvp.setRange(pgvp.getRange());
        pdvp.UpdateData();
        
    }
    
    //@Override
    //public void paintComponent(Graphics g)
    //{
    //    super.paint(g);
        //pairViewsPane.setSize(getWidth(),getHeight());
        
    //    leftPane.setSize(pairViewsPane.getLeftComponent().getWidth(),pairViewsPane.getLeftComponent().getHeight());
    //    rightPane.setSize(pairViewsPane.getRightComponent().getWidth(), pairViewsPane.getRightComponent().getHeight());
    //}

    /**
     * helper function to call perl for calculating ttd curves based on evid
     * 
     * @param evid 
     */
    private void loadTTDData(Integer evid) {
        
        ttdData.removeAllSeries();
        
        ArrayList<TTDTriplet> ttdList = new ArrayList<TTDTriplet>();
        
        /**call perl script to get the theoretical time curves */
        String commandLine = "perl /export/home/james/VBAS/TT/ttimes.pl " + evid.toString();

        //execute the perl script and read the data into ttdList
        try
        {
            Process proc = Runtime.getRuntime().exec(commandLine);
            
            BufferedInputStream in = new BufferedInputStream(proc.getInputStream());
            Scanner bscanner = new Scanner(in);
            
            while (bscanner.hasNextLine())
            {
                String temp = bscanner.nextLine();
                TTDTriplet tempTriplet = new TTDTriplet(temp);
                ttdList.add(tempTriplet);
                        //System.out.println(tempTriplet);
                        //if(!pnameList.contains(tempTriplet.getPhaseType()))
                        //{
                        //    pnameList.add(tempTriplet.getPhaseType());
                        //}
            }
            proc.waitFor();
 
        }
        catch(IOException ioe)
        {
            System.out.println("Exception: "+ ioe.toString());
        } catch (InterruptedException ex) {
             Exceptions.printStackTrace(ex);
        } 
        
        //iterate the ttdlist and put them into different seriers based on their phase types
        //return time series collections
        DuplicateUnorderTimeSeries dts = null;
        for(int i = 0; i< ttdList.size(); i++)
        {
            if(i==0)
            {
                dts = new DuplicateUnorderTimeSeries(ttdList.get(0).getPhaseType());
                dts.add(new Second(ttdList.get(0).getArrivalTime()),ttdList.get(0).getDelta());
            }
            else if(i==ttdList.size()-1)
            {
                ttdData.addSeries(dts);
            }
            else
            {
                if(ttdList.get(i).getPhaseType().equals(ttdList.get(i-1).getPhaseType()))
                {
                   dts.add(new Second(ttdList.get(i).getArrivalTime()),ttdList.get(i).getDelta()); 
                }
                else
                {
                    ttdData.addSeries(dts);
                    dts = new DuplicateUnorderTimeSeries(ttdList.get(i).getPhaseType());
                    dts.add(new Second(ttdList.get(i).getArrivalTime()),ttdList.get(i).getDelta()); 
                }
            }
        }
        
    }
}
